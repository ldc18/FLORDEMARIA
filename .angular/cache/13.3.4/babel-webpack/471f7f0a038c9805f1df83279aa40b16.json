{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./lazy-viewport\"; // ----------------------------------------------------------------------------------- //\n// ----------------------------------------------------------------------------------- //\n\nexport let LazySrcDirective = /*#__PURE__*/(() => {\n  class LazySrcDirective {\n    // I initialize the lazy-src directive.\n    constructor(elementRef, lazyViewport, renderer) {\n      this.element = elementRef.nativeElement;\n      this.lazyViewport = lazyViewport;\n      this.renderer = renderer;\n      this.src = '';\n      this.backgroundUrl = '';\n      this.visibleClass = '';\n    } // ---\n    // PUBLIC METHODS.\n    // ---\n    // I get called once when the directive is being destroyed.\n\n\n    ngOnDestroy() {\n      // If we haven't detached from the LazyViewport, do so now.\n      this.lazyViewport && this.lazyViewport.removeTarget(this);\n    } // I get called once after the inputs have been bound for the first time.\n\n\n    ngOnInit() {\n      // Attached this directive the LazyViewport so that we can be alerted to changes\n      // in this element's visibility on the page.\n      this.lazyViewport.addTarget(this);\n    } // I get called by the LazyViewport service when the element associated with this\n    // directive has its visibility changed.\n\n\n    updateVisibility(isVisible, ratio) {\n      // When this target starts being tracked by the viewport, the initial visibility\n      // will be reported, even if it is not visible. As such, let's ignore the first\n      // visibility update.\n      if (!isVisible) {\n        return;\n      } // Now that the element is visible, load the underlying SRC value. And, since we\n      // no longer need to worry about loading, we can detach from the LazyViewport.\n\n\n      this.lazyViewport.removeTarget(this);\n      this.lazyViewport = null;\n\n      if (this.src) {\n        this.renderer.setProperty(this.element, 'src', this.src);\n      }\n\n      if (this.backgroundUrl) {\n        this.renderer.setStyle(this.element, 'background', this.backgroundUrl);\n      } // If an active class has been provided, add it to the element.\n\n\n      this.visibleClass && this.renderer.addClass(this.element, this.visibleClass);\n    }\n\n  }\n\n  LazySrcDirective.ɵfac = function LazySrcDirective_Factory(t) {\n    return new (t || LazySrcDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.LazyViewport), i0.ɵɵdirectiveInject(i0.Renderer2));\n  };\n\n  LazySrcDirective.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: LazySrcDirective,\n    selectors: [[\"\", \"lazySrc\", \"\"]],\n    inputs: {\n      src: [\"lazySrc\", \"src\"],\n      backgroundUrl: [\"lazyBackground\", \"backgroundUrl\"],\n      visibleClass: [\"lazySrcVisible\", \"visibleClass\"]\n    }\n  });\n  return LazySrcDirective;\n})();","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { PLATFORM_ID } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport { shareReplay, map, filter, take } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./api.service\";\nimport * as i2 from \"./theme.service\";\nimport * as i3 from \"./analytics.service\";\nexport let EnvConfigurationService = /*#__PURE__*/(() => {\n  class EnvConfigurationService {\n    constructor(apiService, themeService, analyticsService, platformId) {\n      this.apiService = apiService;\n      this.themeService = themeService;\n      this.analyticsService = analyticsService;\n      this.platformId = platformId;\n    }\n\n    getConfigType$(type) {\n      return this.configuration$.pipe(map(configuration => configuration[type]));\n    }\n\n    setTheme(conf) {\n      if (conf.styles) {\n        Object.keys(conf.styles).map(style => {\n          const styleValue = conf.styles[style];\n\n          if (styleValue) {\n            const varName = style.split(/(?=[A-Z])/).join('-').toLowerCase();\n\n            if (style.includes('Background')) {\n              this.themeService.setCSSVariable(`url(${styleValue})`, `${varName}-url`);\n            }\n\n            this.themeService.setCSSVariable(styleValue, varName);\n\n            if (style.includes('Color')) {\n              if (style.includes('primary')) {\n                this.themeService.setThemeColor(styleValue, 'theme-primary');\n              }\n\n              if (style.includes('secondary')) {\n                this.themeService.setThemeColor(styleValue, 'theme-secondary');\n              }\n            }\n          }\n        });\n      }\n    }\n\n    load() {\n      if (!this.configuration$) {\n        this.configuration$ = this.apiService.getConfig().pipe(filter(() => isPlatformBrowser(this.platformId)), map(response => response.config ? JSON.parse(atob(response.config)) : {}), shareReplay(1));\n        this.configuration$.pipe(filter(conf => !!conf), take(1)).subscribe(conf => {\n          this.config = conf;\n          this.setTheme(conf);\n          this.analyticsService.initial(conf);\n        });\n      }\n\n      return this.configuration$;\n    }\n\n  }\n\n  EnvConfigurationService.ɵfac = function EnvConfigurationService_Factory(t) {\n    return new (t || EnvConfigurationService)(i0.ɵɵinject(i1.ApiService), i0.ɵɵinject(i2.ThemeService), i0.ɵɵinject(i3.AnalyticsService), i0.ɵɵinject(PLATFORM_ID));\n  };\n\n  EnvConfigurationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: EnvConfigurationService,\n    factory: EnvConfigurationService.ɵfac,\n    providedIn: 'root'\n  });\n  return EnvConfigurationService;\n})();","map":null,"metadata":{},"sourceType":"module"}
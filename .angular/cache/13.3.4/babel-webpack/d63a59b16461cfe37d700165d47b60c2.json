{"ast":null,"code":"import { switchMap, map, catchError } from 'rxjs/operators';\nimport { createEffect, ofType } from '@ngrx/effects';\nimport { of } from 'rxjs';\nimport * as actions from '../store/actions';\nimport { EshopActions } from '../store/actions';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"../services/api.service\";\nexport let AppEffects = /*#__PURE__*/(() => {\n  class AppEffects {\n    constructor(_actions, apiService) {\n      this._actions = _actions;\n      this.apiService = apiService; // AUTH\n\n      this.signIn$ = createEffect(() => this._actions.pipe(ofType(EshopActions.SignIn), switchMap(action => this.apiService.signIn(action.payload)), map(res => new actions.SignInSuccess(res))));\n      this.signUp$ = createEffect(() => this._actions.pipe(ofType(EshopActions.SignUp), switchMap(action => this.apiService.signUp(action.payload)), map(res => new actions.SignUpSuccess(res))));\n      this.fetchUser$ = createEffect(() => this._actions.pipe(ofType(EshopActions.GetUser), switchMap(action => this.apiService.getUser()), map(res => new actions.StoreUser(res)), catchError(() => of(new actions.GetUserFail()))));\n      this.getPages$ = createEffect(() => this._actions.pipe(ofType(EshopActions.GetPages), switchMap(action => this.apiService.getPages(action.payload)), map(res => new actions.GetPagesSuccess(res)), catchError(() => of(new actions.GetPagesFail()))));\n      this.getPage$ = createEffect(() => this._actions.pipe(ofType(EshopActions.GetPage), switchMap(action => this.apiService.getPage(action.payload)), map(res => new actions.GetPageSuccess(res)), catchError(() => of(new actions.GetPageFail()))));\n      this.addOrEditPage$ = createEffect(() => this._actions.pipe(ofType(EshopActions.AddOrEditPage), switchMap(action => this.apiService.addOrEditPage(action.payload)), map(res => new actions.AddOrEditPageSuccess(res)), catchError(() => of(new actions.AddOrEditPageFail()))));\n      this.removePage$ = createEffect(() => this._actions.pipe(ofType(EshopActions.RemovePage), switchMap(action => this.apiService.removePage(action.payload)), map(res => new actions.RemovePageSuccess(res)), catchError(() => of(new actions.RemovePageFail()))));\n      this.getThemes$ = createEffect(() => this._actions.pipe(ofType(EshopActions.GetThemes), switchMap(action => this.apiService.getThemes()), map(res => new actions.GetThemesSuccess(res)), catchError(() => of(new actions.GetThemesFail()))));\n      this.addOrEditTheme$ = createEffect(() => this._actions.pipe(ofType(EshopActions.AddOrEditTheme), switchMap(action => this.apiService.addOrEditTheme(action.payload)), map(res => new actions.AddOrEditThemeSuccess(res)), catchError(() => of(new actions.AddOrEditThemeFail()))));\n      this.removeTheme$ = createEffect(() => this._actions.pipe(ofType(EshopActions.RemoveTheme), switchMap(action => this.apiService.removeTheme(action.payload)), map(res => new actions.RemoveThemeSuccess(res)), catchError(() => of(new actions.RemoveThemeFail()))));\n      this.getConfigs$ = createEffect(() => this._actions.pipe(ofType(EshopActions.GetConfigs), switchMap(action => this.apiService.getConfigs()), map(res => new actions.GetConfigsSuccess(res)), catchError(() => of(new actions.GetConfigsFail()))));\n      this.addOrEditConfig$ = createEffect(() => this._actions.pipe(ofType(EshopActions.AddOrEditConfig), switchMap(action => this.apiService.addOrEditConfig(action.payload)), map(res => new actions.AddOrEditConfigSuccess(res)), catchError(() => of(new actions.AddOrEditConfigFail()))));\n      this.removeConfig$ = createEffect(() => this._actions.pipe(ofType(EshopActions.RemoveConfig), switchMap(action => this.apiService.removeConfig(action.payload)), map(res => new actions.RemoveConfigSuccess(res)), catchError(() => of(new actions.RemoveConfigFail())))); // PRODUCT\n\n      this.getProducts$ = createEffect(() => this._actions.pipe(ofType(EshopActions.GetProducts), switchMap(action => this.apiService.getProducts(action.payload)), map(res => new actions.GetProductsSuccess(res))));\n      this.getCategories$ = createEffect(() => this._actions.pipe(ofType(EshopActions.GetCategories), switchMap(action => this.apiService.getCategories(action.payload)), map(res => new actions.GetCategoriesSuccess(res))));\n      this.getProductsSearch$ = createEffect(() => this._actions.pipe(ofType(EshopActions.GetProductsSearch), switchMap(action => this.apiService.getProductsSearch(action.payload)), map(res => new actions.GetProductsSearchSuccess(res))));\n      this.getProduct$ = createEffect(() => this._actions.pipe(ofType(EshopActions.GetProduct), switchMap(action => this.apiService.getProduct(action.payload)), map(res => new actions.GetProductSuccess(res))));\n      this.MakeOrderWithPayment$ = createEffect(() => this._actions.pipe(ofType(EshopActions.MakeOrderWithPayment), switchMap(action => this.apiService.handleToken(action.payload)), map(res => new actions.MakeOrderWithPaymentSuccess(res))));\n      this.makeOrder$ = createEffect(() => this._actions.pipe(ofType(EshopActions.MakeOrder), switchMap(action => this.apiService.makeOrder(action.payload)), map(res => new actions.MakeOrderSuccess(res)), catchError(() => of(new actions.MakeOrderFail()))));\n      this.getCart$ = createEffect(() => this._actions.pipe(ofType(EshopActions.GetCart), switchMap(action => this.apiService.getCart(action.payload)), map(res => new actions.GetCartSuccess(res))));\n      this.addToCart$ = createEffect(() => this._actions.pipe(ofType(EshopActions.AddToCart), switchMap(action => this.apiService.addToCart(action.payload)), map(res => new actions.AddToCartSuccess(res))));\n      this.removeFromCart$ = createEffect(() => this._actions.pipe(ofType(EshopActions.RemoveFromCart), switchMap(action => this.apiService.removeFromCart(action.payload)), map(res => new actions.GetCartSuccess(res))));\n      this.stripeSession$ = createEffect(() => this._actions.pipe(ofType(EshopActions.StripeSession), switchMap(action => this.apiService.getStripeSession(action.payload)), map(res => new actions.StripeSessionSuccess(res))));\n      this.GetUserOrders$ = createEffect(() => this._actions.pipe(ofType(EshopActions.GetUserOrders), switchMap(action => this.apiService.getUserOrders()), map(res => new actions.GetUserOrdersSuccess(res)))); // DASHBOARD\n\n      this.addProduct$ = createEffect(() => this._actions.pipe(ofType(EshopActions.AddProduct), switchMap(action => this.apiService.addProduct(action.payload)), map(res => new actions.AddProductSuccess(res))));\n      this.editProduct$ = createEffect(() => this._actions.pipe(ofType(EshopActions.EditProduct), switchMap(action => this.apiService.editProduct(action.payload)), map(res => new actions.EditProductSuccess(res))));\n      this.removeProduct$ = createEffect(() => this._actions.pipe(ofType(EshopActions.RemoveProduct), switchMap(action => this.apiService.removeProduct(action.payload)), map(res => new actions.RemoveProductSuccess(res))));\n      this.getAllProducts$ = createEffect(() => this._actions.pipe(ofType(EshopActions.GetAllProducts), switchMap(action => this.apiService.getAllProducts()), map(res => new actions.GetAllProductsSuccess(res))));\n      this.getAllCategories$ = createEffect(() => this._actions.pipe(ofType(EshopActions.GetAllCategories), switchMap(action => this.apiService.getAllCategories()), map(res => new actions.GetAllCategoriesSuccess(res))));\n      this.editCategory$ = createEffect(() => this._actions.pipe(ofType(EshopActions.EditCategory), switchMap(action => this.apiService.editCategory(action.payload)), map(res => new actions.EditCategorySuccess(res))));\n      this.removeCategory$ = createEffect(() => this._actions.pipe(ofType(EshopActions.RemoveCategory), switchMap(action => this.apiService.removeCategory(action.payload)), map(res => new actions.RemoveCategorySuccess(res))));\n      this.getImages$ = createEffect(() => this._actions.pipe(ofType(EshopActions.GetImages), switchMap(action => this.apiService.getImages()), map(res => new actions.GetImagesSuccess(res))));\n      this.addProductImagesUrl$ = createEffect(() => this._actions.pipe(ofType(EshopActions.AddProductImagesUrl), switchMap(action => this.apiService.addProductImagesUrl(action.payload)), map(res => {\n        if (res && res.titleUrl) {\n          return new actions.GetProductSuccess(res);\n        }\n\n        return new actions.AddProductImagesUrlSuccess(res);\n      })));\n      this.removeImage$ = createEffect(() => this._actions.pipe(ofType(EshopActions.RemoveProductImage), switchMap(action => this.apiService.removeImage(action.payload)), map(res => {\n        if (res && res.titleUrl) {\n          return new actions.GetProductSuccess(res);\n        }\n\n        return new actions.RemoveProductImageSuccess(res);\n      })));\n      this.getOrders$ = createEffect(() => this._actions.pipe(ofType(EshopActions.GetOrders), switchMap(action => this.apiService.getOrders()), map(res => new actions.GetOrdersSuccess(res))));\n      this.getOrder$ = createEffect(() => this._actions.pipe(ofType(EshopActions.GetOrder), switchMap(action => this.apiService.getOrder(action.payload)), map(res => new actions.GetOrderSuccess(res))));\n      this.updateOrder$ = createEffect(() => this._actions.pipe(ofType(EshopActions.UpdateOrder), switchMap(action => this.apiService.updateOrder(action.payload)), map(res => new actions.GetOrderSuccess(res))));\n      this.getAllTranslations$ = createEffect(() => this._actions.pipe(ofType(EshopActions.GetAllTranslations), switchMap(action => this.apiService.getAllTranslations()), map(res => new actions.GetAllTranslationsSuccess(res))));\n      this.editTranslation$ = createEffect(() => this._actions.pipe(ofType(EshopActions.EditTranslation), switchMap(action => this.apiService.editAllTranslation(action.payload)), map(res => new actions.EditTranslationSuccess(res)))); // OTHERS\n\n      this.sendContact$ = createEffect(() => this._actions.pipe(ofType(EshopActions.SendContact), switchMap(action => this.apiService.sendContact(action.payload)), map(res => new actions.SendContactSuccess())));\n    }\n\n  }\n\n  AppEffects.ɵfac = function AppEffects_Factory(t) {\n    return new (t || AppEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.ApiService));\n  };\n\n  AppEffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AppEffects,\n    factory: AppEffects.ɵfac\n  });\n  return AppEffects;\n})();","map":null,"metadata":{},"sourceType":"module"}
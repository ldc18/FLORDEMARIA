{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport { PLATFORM_ID } from '@angular/core';\nimport { HttpHeaders } from '@angular/common/http';\nimport { isPlatformBrowser, isPlatformServer } from '@angular/common';\nimport { combineLatest } from 'rxjs';\nimport * as fromRoot from '../store/reducers';\nimport { environment } from '../../environments/environment';\nimport { accessTokenKey } from '../shared/constants';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./window.service\";\nimport * as i3 from \"@ngrx/store\";\nexport let ApiService = /*#__PURE__*/(() => {\n  class ApiService {\n    constructor(http, _window, store, serverUrl, platformId) {\n      this.http = http;\n      this._window = _window;\n      this.store = store;\n      this.serverUrl = serverUrl;\n      this.platformId = platformId;\n      this.apiUrl = environment.apiUrl;\n      this.requestOptions = {};\n      this.ranNumber = 0;\n      this.setHeaders();\n\n      if (environment.production) {\n        if (isPlatformServer(this.platformId)) {\n          this.apiUrl = this.serverUrl || '';\n        }\n\n        if (isPlatformBrowser(this.platformId)) {\n          this.apiUrl = this._window.location.origin || '';\n        }\n      }\n    }\n\n    getConfig() {\n      const configUrl = this.apiUrl + '/api/eshop/config';\n      return this.http.get(configUrl, this.requestOptions);\n    }\n\n    getUser() {\n      const userUrl = this.apiUrl + '/api/auth';\n      return this.http.get(userUrl, this.requestOptions);\n    }\n\n    signIn(req) {\n      const sendContact = this.apiUrl + '/api/auth/signin';\n      return this.http.post(sendContact, req, this.requestOptions);\n    }\n\n    signUp(req) {\n      const sendContact = this.apiUrl + '/api/auth/signup';\n      return this.http.post(sendContact, req, this.requestOptions);\n    }\n\n    getProducts(req) {\n      const {\n        lang,\n        page,\n        sort,\n        category,\n        maxPrice\n      } = req;\n      const addCategory = category ? {\n        category\n      } : {};\n      const categoryQuery = category ? '&category=' + category : '';\n      const priceQuery = maxPrice ? '&maxPrice=' + maxPrice : '';\n      const productsUrl = this.apiUrl + '/api/products?lang=' + lang + '&page=' + page + '&sort=' + sort + categoryQuery + priceQuery;\n      return this.http.get(productsUrl, this.requestOptions).pipe(map(data => ({\n        products: data.all.map(product => ({ ...product,\n          tags: product.tags.filter(Boolean).map(cat => cat.toLowerCase())\n        })),\n        pagination: data.pagination,\n        maxPrice: data.maxPrice,\n        minPrice: data.minPrice,\n        ...addCategory\n      })));\n    }\n\n    getCategories(lang) {\n      const categoriesUrl = this.apiUrl + '/api/products/categories?lang=' + lang;\n      return this.http.get(categoriesUrl, this.requestOptions);\n    }\n\n    getProductsSearch(query) {\n      const productUrl = this.apiUrl + '/api/products/search?query=' + query;\n      return this.http.get(productUrl, this.requestOptions);\n    }\n\n    getProduct(params) {\n      const productUrl = this.apiUrl + '/api/products/' + params;\n      return this.http.get(productUrl, this.requestOptions);\n    }\n\n    addProduct(product) {\n      const addProduct = this.apiUrl + '/api/products/add';\n      return this.http.post(addProduct, product, this.requestOptions);\n    }\n\n    editProduct(product) {\n      const eidtProduct = this.apiUrl + '/api/products/edit';\n      return this.http.patch(eidtProduct, product, this.requestOptions);\n    }\n\n    getAllProducts() {\n      const productUrl = this.apiUrl + '/api/products/all';\n      return this.http.get(productUrl, this.requestOptions);\n    }\n\n    removeProduct(name) {\n      const removeProduct = this.apiUrl + '/api/products/' + name;\n      return this.http.delete(removeProduct, this.requestOptions);\n    }\n\n    getAllCategories() {\n      const categoriesUrl = this.apiUrl + '/api/products/categories/all';\n      return this.http.get(categoriesUrl, this.requestOptions);\n    }\n\n    editCategory(category) {\n      const eidtCategory = this.apiUrl + '/api/products/categories/edit';\n      return this.http.patch(eidtCategory, category, this.requestOptions);\n    }\n\n    removeCategory(name) {\n      const removeCategory = this.apiUrl + '/api/products/categories/' + name;\n      return this.http.delete(removeCategory, this.requestOptions);\n    }\n\n    handleToken(token) {\n      const tokenUrl = this.apiUrl + '/api/orders/stripe';\n      return this.http.post(tokenUrl, token, this.requestOptions);\n    }\n\n    makeOrder(req) {\n      const addOrder = this.apiUrl + '/api/orders/add';\n      return this.http.post(addOrder, req, this.requestOptions);\n    }\n\n    getUserOrders() {\n      const userOrderUrl = this.apiUrl + '/api/orders';\n      return this.http.get(userOrderUrl, this.requestOptions);\n    }\n\n    getOrders() {\n      const ordersUrl = this.apiUrl + '/api/orders/all';\n      return this.http.get(ordersUrl, this.requestOptions);\n    }\n\n    getOrder(id) {\n      const orderUrl = this.apiUrl + '/api/orders/' + id;\n      return this.http.get(orderUrl, this.requestOptions);\n    }\n\n    updateOrder(req) {\n      const orderUpdateUrl = this.apiUrl + '/api/orders';\n      return this.http.patch(orderUpdateUrl, req, this.requestOptions);\n    }\n\n    getStripeSession(req) {\n      const stripeSessionUrl = this.apiUrl + '/api/orders/stripe/session';\n      return this.http.post(stripeSessionUrl, req, this.requestOptions);\n    }\n\n    getCart(lang) {\n      const withLangQuery = lang ? '?lang=' + lang : '';\n      const cartUrl = this.apiUrl + '/api/cart' + withLangQuery;\n      return this.http.get(cartUrl, this.requestOptions);\n    }\n\n    addToCart(params) {\n      this.ranNumber = this.ranNumber + 1;\n      const randomNum = '&random=' + this.ranNumber;\n      const addToCartUrl = this.apiUrl + '/api/cart/add' + params + randomNum;\n      return this.http.get(addToCartUrl, this.requestOptions);\n    }\n\n    removeFromCart(params) {\n      this.ranNumber = this.ranNumber + 1;\n      const randomNum = '&random=' + this.ranNumber;\n      const removeFromCartUrl = this.apiUrl + '/api/cart/remove' + params + randomNum;\n      return this.http.get(removeFromCartUrl, this.requestOptions);\n    }\n\n    getLangTranslations(lang) {\n      const translationsUrl = this.apiUrl + '/api/translations?lang=' + lang;\n      return this.http.get(translationsUrl);\n    }\n\n    getAllTranslations() {\n      const translationsUrl = this.apiUrl + '/api/translations/all';\n      return this.http.get(translationsUrl, this.requestOptions);\n    }\n\n    editTranslation({\n      lang,\n      keys\n    }) {\n      const translationsUpdateUrl = this.apiUrl + '/api/translations?lang=' + lang;\n      return this.http.patch(translationsUpdateUrl, {\n        keys: keys\n      }, this.requestOptions);\n    }\n\n    editAllTranslation(translations) {\n      const translationsUpdateUrl = this.apiUrl + '/api/translations/all';\n      return this.http.patch(translationsUpdateUrl, translations, this.requestOptions);\n    }\n\n    getImages() {\n      const getImages = this.apiUrl + '/api/admin/images';\n      return this.http.get(getImages, this.requestOptions);\n    }\n\n    addProductImagesUrl({\n      image,\n      titleUrl\n    }) {\n      const titleUrlQuery = titleUrl ? '?titleUrl=' + titleUrl : '';\n      const addImageUrl = this.apiUrl + '/api/admin/images/add' + titleUrlQuery;\n      return this.http.post(addImageUrl, {\n        image\n      }, this.requestOptions);\n    }\n\n    removeImage({\n      image,\n      titleUrl\n    }) {\n      const titleUrlQuery = titleUrl ? '?titleUrl=' + titleUrl : '';\n      const removeImage = this.apiUrl + '/api/admin/images/remove' + titleUrlQuery;\n      return this.http.post(removeImage, {\n        image\n      }, this.requestOptions);\n    }\n\n    uploadImage({\n      fileToUpload,\n      titleUrl\n    }) {\n      if (isPlatformBrowser(this.platformId)) {\n        const titleUrlQuery = titleUrl ? '?titleUrl=' + titleUrl : '';\n        const accessToken = localStorage.getItem(accessTokenKey);\n        const formData = new FormData();\n        formData.append('file', fileToUpload);\n        let headers = new HttpHeaders();\n        headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        const sendHeaders = {\n          headers,\n          withCredentials: true\n        };\n        const uploadUrl = this.apiUrl + '/api/admin/images/upload' + titleUrlQuery;\n        return this.http.post(uploadUrl, formData, {\n          reportProgress: true,\n          responseType: 'json',\n          ...sendHeaders\n        });\n      }\n    }\n\n    sendContact(req) {\n      const sendContact = this.apiUrl + '/api/eshop/contact';\n      return this.http.post(sendContact, req, this.requestOptions);\n    }\n\n    getPages(query) {\n      const titlesQueryParams = query ? `?titles=${query.titles}&lang=${query.lang}` : '';\n      const pagesUrl = this.apiUrl + '/api/eshop/page/all' + titlesQueryParams;\n      return this.http.get(pagesUrl, this.requestOptions);\n    }\n\n    getPage(query) {\n      const pageUrl = this.apiUrl + '/api/eshop/page/' + query.titleUrl + '?lang=' + query.lang;\n      return this.http.get(pageUrl, this.requestOptions);\n    }\n\n    addOrEditPage(pageReq) {\n      const pageUrl = this.apiUrl + '/api/eshop/page';\n      return this.http.post(pageUrl, pageReq, this.requestOptions);\n    }\n\n    removePage(titleUrl) {\n      const pageUrl = this.apiUrl + '/api/eshop/page/' + titleUrl;\n      return this.http.delete(pageUrl, this.requestOptions);\n    }\n\n    getThemes() {\n      const themesUrl = this.apiUrl + '/api/eshop/theme/all';\n      return this.http.get(themesUrl, this.requestOptions);\n    }\n\n    addOrEditTheme(themeReq) {\n      const themeUrl = this.apiUrl + '/api/eshop/theme';\n      return this.http.post(themeUrl, themeReq, this.requestOptions);\n    }\n\n    removeTheme(titleUrl) {\n      const themeUrl = this.apiUrl + '/api/eshop/theme/' + titleUrl;\n      return this.http.delete(themeUrl, this.requestOptions);\n    }\n\n    getConfigs() {\n      const configsUrl = this.apiUrl + '/api/eshop/config/all';\n      return this.http.get(configsUrl, this.requestOptions);\n    }\n\n    addOrEditConfig(configReq) {\n      const configUrl = this.apiUrl + '/api/eshop/config';\n      return this.http.post(configUrl, configReq, this.requestOptions);\n    }\n\n    removeConfig(titleUrl) {\n      const configUrl = this.apiUrl + '/api/eshop/config/' + titleUrl;\n      return this.http.delete(configUrl, this.requestOptions);\n    }\n\n    setHeaders() {\n      combineLatest([this.store.select(fromRoot.getLang), this.store.select(fromRoot.getUser)]).subscribe(([lang, user]) => {\n        if (user && user.accessToken && isPlatformBrowser(this.platformId)) {\n          localStorage.setItem(accessTokenKey, user.accessToken);\n        }\n\n        const accessToken = isPlatformBrowser(this.platformId) ? localStorage.getItem(accessTokenKey) : '';\n        let headers = new HttpHeaders();\n        headers = headers.set('Authorization', 'Bearer ' + accessToken).set('lang', lang);\n        this.requestOptions = {\n          headers,\n          withCredentials: true\n        };\n      });\n    }\n\n  }\n\n  ApiService.ɵfac = function ApiService_Factory(t) {\n    return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.WindowService), i0.ɵɵinject(i3.Store), i0.ɵɵinject('serverUrl', 8), i0.ɵɵinject(PLATFORM_ID));\n  };\n\n  ApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ApiService,\n    factory: ApiService.ɵfac,\n    providedIn: 'root'\n  });\n  return ApiService;\n})();","map":null,"metadata":{},"sourceType":"module"}
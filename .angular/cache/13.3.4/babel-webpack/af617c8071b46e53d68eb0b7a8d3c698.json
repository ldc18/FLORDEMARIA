{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { CookieService } from 'ngx-cookie-service';\nimport { ApiService } from './api.service';\nimport { languages } from '../shared/constants';\nimport { take } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nexport let TranslateService = /*#__PURE__*/(() => {\n  class TranslateService {\n    constructor(injector) {\n      this.injector = injector;\n      this.translationsSub$ = new BehaviorSubject({});\n      this.languageSub$ = new BehaviorSubject('');\n    }\n\n    get apiService() {\n      return this.injector.get(ApiService);\n    }\n\n    get cookie() {\n      return this.injector.get(CookieService);\n    }\n\n    getLang$() {\n      return this.languageSub$.asObservable();\n    }\n\n    getTranslations$() {\n      return this.translationsSub$.asObservable();\n    }\n\n    getTranslationsData(lang) {\n      try {\n        return this.apiService.getLangTranslations(lang).pipe(take(1)).subscribe(translations => {\n          if (!lang && translations) {\n            this.setLang(translations.lang);\n          } else if (!lang) {\n            this.setLang(languages[0]);\n          }\n\n          const translationKeys = translations && translations['keys'] ? translations['keys'] : {};\n          this.translationsSub$.next(translationKeys);\n          return Object.assign({}, translationKeys);\n        }, error => {\n          return {};\n        });\n      } catch (_a) {\n        return {};\n      }\n    }\n\n    use(lang) {\n      return new Promise((resolve, reject) => {\n        const foundLang = lang || this.cookie.get('eshop_lang');\n        resolve(this.setTranslations(foundLang));\n      });\n    }\n\n    setTranslations(lang) {\n      if (lang) {\n        this.setLang(lang);\n      } else {\n        this.setLang(languages[0]);\n      }\n\n      const langToSend = lang || languages[0];\n      return this.getTranslationsData(langToSend);\n    }\n\n    setLang(lang) {\n      this.languageSub$.next(lang);\n      this.cookie.set('eshop_lang', lang);\n      this.lang = lang;\n    }\n\n  }\n\n  TranslateService.ɵfac = function TranslateService_Factory(t) {\n    return new (t || TranslateService)(i0.ɵɵinject(i0.Injector));\n  };\n\n  TranslateService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TranslateService,\n    factory: TranslateService.ɵfac,\n    providedIn: 'root'\n  });\n  return TranslateService;\n})();","map":null,"metadata":{},"sourceType":"module"}
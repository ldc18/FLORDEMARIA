{"ast":null,"code":"import { HttpResponse, HttpHeaders, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport * as i0 from '@angular/core';\nimport { Injectable, NgModule, APP_INITIALIZER } from '@angular/core';\nimport * as i1 from '@angular/platform-browser';\nimport { makeStateKey, BrowserTransferStateModule } from '@angular/platform-browser';\nimport { of } from 'rxjs';\nimport { filter, take, tap } from 'rxjs/operators';\nimport { DOCUMENT } from '@angular/common';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nfunction getHeadersMap(headers) {\n  const headersMap = {};\n\n  for (const key of headers.keys()) {\n    const values = headers.getAll(key);\n\n    if (values !== null) {\n      headersMap[key] = values;\n    }\n  }\n\n  return headersMap;\n}\n\nlet TransferHttpCacheInterceptor = /*#__PURE__*/(() => {\n  class TransferHttpCacheInterceptor {\n    constructor(appRef, transferState) {\n      this.transferState = transferState;\n      this.isCacheActive = true; // Stop using the cache if the application has stabilized, indicating initial rendering is\n      // complete.\n\n      appRef.isStable.pipe(filter(isStable => isStable), take(1)).subscribe(() => {\n        this.isCacheActive = false;\n      });\n    }\n\n    invalidateCacheEntry(url) {\n      Object.keys(this.transferState['store']).forEach(key => key.includes(url) ? this.transferState.remove(makeStateKey(key)) : null);\n    }\n\n    makeCacheKey(method, url, params) {\n      // make the params encoded same as a url so it's easy to identify\n      const encodedParams = params.keys().sort().map(k => `${k}=${params.getAll(k)}`).join('&');\n      const key = (method === 'GET' ? 'G.' : 'H.') + url + '?' + encodedParams;\n      return makeStateKey(key);\n    }\n\n    intercept(req, next) {\n      // Stop using the cache if there is a mutating call.\n      if (req.method !== 'GET' && req.method !== 'HEAD') {\n        this.isCacheActive = false;\n        this.invalidateCacheEntry(req.url);\n      }\n\n      if (!this.isCacheActive) {\n        // Cache is no longer active. Pass the request through.\n        return next.handle(req);\n      }\n\n      const storeKey = this.makeCacheKey(req.method, req.url, req.params);\n\n      if (this.transferState.hasKey(storeKey)) {\n        // Request found in cache. Respond using it.\n        const response = this.transferState.get(storeKey, {});\n        return of(new HttpResponse({\n          body: response.body,\n          headers: new HttpHeaders(response.headers),\n          status: response.status,\n          statusText: response.statusText,\n          url: response.url\n        }));\n      } else {\n        // Request not found in cache. Make the request and cache it.\n        const httpEvent = next.handle(req);\n        return httpEvent.pipe(tap(event => {\n          if (event instanceof HttpResponse) {\n            this.transferState.set(storeKey, {\n              body: event.body,\n              headers: getHeadersMap(event.headers),\n              status: event.status,\n              statusText: event.statusText,\n              url: event.url || ''\n            });\n          }\n        }));\n      }\n    }\n\n  }\n\n  TransferHttpCacheInterceptor.ɵfac = function TransferHttpCacheInterceptor_Factory(t) {\n    return new (t || TransferHttpCacheInterceptor)(i0.ɵɵinject(i0.ApplicationRef), i0.ɵɵinject(i1.TransferState));\n  };\n\n  TransferHttpCacheInterceptor.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: TransferHttpCacheInterceptor,\n    factory: TransferHttpCacheInterceptor.ɵfac\n  });\n  return TransferHttpCacheInterceptor;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * An NgModule used in conjunction with `ServerTransferHttpCacheModule` to transfer cached HTTP\n * calls from the server to the client application.\n */\n\n\nlet TransferHttpCacheModule = /*#__PURE__*/(() => {\n  class TransferHttpCacheModule {}\n\n  TransferHttpCacheModule.ɵfac = function TransferHttpCacheModule_Factory(t) {\n    return new (t || TransferHttpCacheModule)();\n  };\n\n  TransferHttpCacheModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: TransferHttpCacheModule\n  });\n  TransferHttpCacheModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [TransferHttpCacheInterceptor, {\n      provide: HTTP_INTERCEPTORS,\n      useExisting: TransferHttpCacheInterceptor,\n      multi: true\n    }],\n    imports: [[BrowserTransferStateModule]]\n  });\n  return TransferHttpCacheModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nfunction domContentLoadedFactory(doc) {\n  return () => new Promise((resolve, _reject) => {\n    if (doc.readyState === 'complete' || doc.readyState === 'interactive') {\n      resolve();\n      return;\n    }\n\n    const contentLoaded = () => {\n      doc.removeEventListener('DOMContentLoaded', contentLoaded);\n      resolve();\n    };\n\n    doc.addEventListener('DOMContentLoaded', contentLoaded);\n  });\n}\n\nlet StateTransferInitializerModule = /*#__PURE__*/(() => {\n  class StateTransferInitializerModule {}\n\n  StateTransferInitializerModule.ɵfac = function StateTransferInitializerModule_Factory(t) {\n    return new (t || StateTransferInitializerModule)();\n  };\n\n  StateTransferInitializerModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: StateTransferInitializerModule\n  });\n  StateTransferInitializerModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [{\n      provide: APP_INITIALIZER,\n      multi: true,\n      useFactory: domContentLoadedFactory,\n      deps: [DOCUMENT]\n    }]\n  });\n  return StateTransferInitializerModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { StateTransferInitializerModule, TransferHttpCacheModule, TransferHttpCacheInterceptor as ɵTransferHttpCacheInterceptor }; //# sourceMappingURL=common.mjs.map","map":null,"metadata":{},"sourceType":"module"}
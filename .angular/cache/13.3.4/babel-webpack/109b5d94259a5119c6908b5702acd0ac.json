{"ast":null,"code":"import { map, take, withLatestFrom, filter } from 'rxjs/operators';\nimport * as fromRoot from '../store/reducers';\nimport * as actions from '../store/actions';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/store\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(store) {\n      this.store = store;\n      this.store.select(fromRoot.getUser).pipe(take(1)).subscribe(user => {\n        if (!user) {\n          this.store.dispatch(new actions.GetUser());\n        }\n      });\n    }\n\n    get isLoggedIn() {\n      return this.store.select(fromRoot.getAuthLoading).pipe(filter(loading => !loading), withLatestFrom(this.store.select(fromRoot.getUser)), take(1), map(([_loading, user]) => !!(user && user.email)));\n    }\n\n    get isAdmin() {\n      return this.store.select(fromRoot.getAuthLoading).pipe(filter(loading => !loading), withLatestFrom(this.store.select(fromRoot.getUser)), take(1), map(([_loading, user]) => !!(user && user.roles.includes('admin'))));\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.Store));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { catchError } from 'rxjs/operators';\nimport { of, throwError } from 'rxjs';\nimport { HttpResponse } from '@angular/common/http';\nimport { makeStateKey } from '@angular/platform-browser';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/platform-browser\";\nexport let BrowserHttpInterceptor = /*#__PURE__*/(() => {\n  class BrowserHttpInterceptor {\n    constructor(transferState) {\n      this.transferState = transferState;\n    }\n\n    intercept(request, next) {\n      if (request.method !== 'GET') {\n        return next.handle(request).pipe(catchError(error => {\n          this._handleError(error.url, error.status);\n\n          return throwError(error);\n        }));\n      }\n\n      const requestUrl = request.url ? request.url.replace(/^https?:\\/\\//, '') : request.url;\n      this.key = makeStateKey(requestUrl);\n      const storedResponse = this.transferState.get(this.key, null);\n\n      if (storedResponse) {\n        const response = new HttpResponse({\n          body: storedResponse,\n          status: 200\n        });\n        return of(response);\n      }\n\n      return next.handle(request).pipe(catchError(error => {\n        this._handleError(error.url, error.status);\n\n        return throwError(error);\n      }));\n    }\n\n    _handleError(url, statusCode) {\n      switch (statusCode) {\n        case 404:\n          console.warn('HTTP status code: 404: ', url, statusCode);\n          break;\n\n        case 410:\n          console.warn('HTTP status code: 410: ', url, statusCode);\n          break;\n\n        case 500:\n          console.warn('HTTP status code: 500: ', url, statusCode);\n          break;\n\n        case 503:\n          console.warn('HTTP status code: 503: ', url, statusCode);\n          break;\n\n        default:\n          console.warn('HTTP status code: Unhandled ', url, statusCode);\n          break;\n      }\n    }\n\n  }\n\n  BrowserHttpInterceptor.ɵfac = function BrowserHttpInterceptor_Factory(t) {\n    return new (t || BrowserHttpInterceptor)(i0.ɵɵinject(i1.TransferState));\n  };\n\n  BrowserHttpInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: BrowserHttpInterceptor,\n    factory: BrowserHttpInterceptor.ɵfac\n  });\n  return BrowserHttpInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module"}
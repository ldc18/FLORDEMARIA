{"ast":null,"code":"import { PLATFORM_ID } from '@angular/core';\nimport { isPlatformBrowser, isPlatformServer } from '@angular/common';\nimport { select } from '@ngrx/store';\nimport { filter, take, delay, skip, map } from 'rxjs/operators';\nimport { of } from 'rxjs';\nimport { NavigationStart } from '@angular/router';\nimport * as fromRoot from './store/reducers';\nimport * as actions from './store/actions';\nimport { languages, currencyLang } from './shared/constants';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/store\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"./services/translate.service\";\nimport * as i5 from \"./services/jsonLD.service\";\nimport * as i6 from \"./components/header/header.component\";\nimport * as i7 from \"./components/footer/footer.component\";\nexport let AppComponent = /*#__PURE__*/(() => {\n  class AppComponent {\n    constructor(elRef, renderer, store, router, location, translate, jsonLDService, platformId) {\n      this.elRef = elRef;\n      this.renderer = renderer;\n      this.store = store;\n      this.router = router;\n      this.location = location;\n      this.translate = translate;\n      this.jsonLDService = jsonLDService;\n      this.platformId = platformId;\n      this.rememberScroll = {};\n      this.position = 0;\n      this.translate.getLang$().pipe(filter(Boolean), take(1)).subscribe(lang => {\n        const langUpdate = {\n          lang,\n          currency: currencyLang[lang]\n        };\n        this.store.dispatch(new actions.ChangeLanguage(langUpdate));\n      });\n      this.store.select(fromRoot.getLang).pipe(filter(Boolean), skip(1)).subscribe(lang => {\n        const checkLang = this.router.url.split('/').filter(Boolean)[0];\n\n        if (checkLang && languages.includes(checkLang)) {\n          const urlWithNewLang = this.router.url.replace(checkLang, lang);\n          this.location.replaceState(urlWithNewLang);\n        }\n\n        translate.use(lang);\n      });\n      this.store.pipe(select(fromRoot.getPosition)).pipe(filter(Boolean)).subscribe(componentPosition => {\n        this.rememberScroll = { ...this.rememberScroll,\n          ...componentPosition\n        };\n        this.renderer.setProperty(this.elRef.nativeElement.querySelector('.main-scroll-wrap'), 'scrollTop', 0);\n      });\n      this.store.select(fromRoot.getUser).pipe(filter(() => isPlatformBrowser(this.platformId)), take(1)).subscribe(user => {\n        if (!user) {\n          this.store.dispatch(new actions.GetUser());\n        }\n      });\n      this.store.select(fromRoot.getUser).pipe(delay(100)).subscribe(user => {\n        if (user && user.email) {\n          this.store.dispatch(new actions.GetUserOrders());\n        }\n      });\n      this.translate.getLang$().pipe(filter(lang => !!lang && isPlatformBrowser(this.platformId))).subscribe(lang => {\n        this.store.dispatch(new actions.GetCart(lang));\n        this.store.dispatch(new actions.GetPages({\n          lang,\n          titles: true\n        }));\n      });\n\n      if (isPlatformServer(this.platformId)) {\n        this.jsonLDService.insertSchema(this.jsonLDService.websiteSchema);\n        this.jsonLDService.insertSchema(this.jsonLDService.orgSchema, 'structured-data-org');\n      }\n\n      this.router.events.pipe(filter(event => event instanceof NavigationStart), map(checkRoute => {\n        this.jsonLDService.insertSchema(this.jsonLDService.websiteSchema);\n        this.jsonLDService.insertSchema(this.jsonLDService.orgSchema, 'structured-data-org');\n      }));\n    }\n\n    onScrolling(event) {\n      this.position = event['target']['scrollTop'];\n    }\n\n    onActivate(component) {\n      const currentComponent = component['component'];\n      const position = currentComponent && this.rememberScroll[currentComponent] ? this.rememberScroll[currentComponent] : 0;\n      of('activate_event').pipe(delay(5), take(1)).subscribe(() => {\n        this.renderer.setProperty(this.elRef.nativeElement.querySelector('.main-scroll-wrap'), 'scrollTop', position);\n      });\n    }\n\n    onDeactivate(component) {\n      if (Object.keys(component).includes('component')) {\n        const currentComponent = component['component'];\n        this.rememberScroll = { ...this.rememberScroll,\n          [currentComponent]: this.position\n        };\n      }\n    }\n\n  }\n\n  AppComponent.ɵfac = function AppComponent_Factory(t) {\n    return new (t || AppComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i1.Store), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.Location), i0.ɵɵdirectiveInject(i4.TranslateService), i0.ɵɵdirectiveInject(i5.JsonLDService), i0.ɵɵdirectiveInject(PLATFORM_ID));\n  };\n\n  AppComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AppComponent,\n    selectors: [[\"eshop-mean-app\"]],\n    decls: 4,\n    vars: 0,\n    consts: [[1, \"main-scroll-wrap\", 3, \"scroll\"], [3, \"activate\", \"deactivate\"]],\n    template: function AppComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵlistener(\"scroll\", function AppComponent_Template_div_scroll_0_listener($event) {\n          return ctx.onScrolling($event);\n        });\n        i0.ɵɵelement(1, \"app-header\");\n        i0.ɵɵelementStart(2, \"router-outlet\", 1);\n        i0.ɵɵlistener(\"activate\", function AppComponent_Template_router_outlet_activate_2_listener($event) {\n          return ctx.onActivate($event);\n        })(\"deactivate\", function AppComponent_Template_router_outlet_deactivate_2_listener($event) {\n          return ctx.onDeactivate($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(3, \"app-footer\");\n        i0.ɵɵelementEnd();\n      }\n    },\n    directives: [i6.HeaderComponent, i2.RouterOutlet, i7.FooterComponent],\n    styles: [\"\"]\n  });\n  return AppComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}